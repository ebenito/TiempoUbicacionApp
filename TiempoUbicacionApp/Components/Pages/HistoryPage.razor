@page "/history"
@using Microsoft.Maui.Devices

@if (_isAndroid)
{
    <AndroidHistory />
}
else
{
    <DesktopHistory />
}

@code {
    private bool _isAndroid;

    protected override void OnInitialized()
    {
        // Detección en tiempo de ejecución
        _isAndroid = DeviceInfo.Current.Platform == DevicePlatform.Android;
    }
}


@* @page "/history"
@using TiempoUbicacionApp.Models
@using TiempoUbicacionApp.Services
@inject IAlertService AlertService
@inject LocationDatabaseService DatabaseService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">

    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4" Style="margin-left: 4vw;">📜 Historial de registros</MudText>

    <MudButton OnClick="BackupToOneDrive">Backup en OneDrive</MudButton>
    <MudButton OnClick="RestoreFromOneDrive">Restaurar desde OneDrive</MudButton>

    @if (entries == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }
    else if (!entries.Any())
    {
        <MudAlert Severity="Severity.Info" Elevation="1">No hay registros guardados.</MudAlert>
    }
    else
    {
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Histórico de datos</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@entries" Dense="true" Hover="true" Bordered="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Fecha</MudTh>
                            <MudTh>Hora Local</MudTh>
                            <MudTh>UTC</MudTh>
                            <MudTh>Ubicación</MudTh>
                            <MudTh>Coordenadas</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Fecha">@context.fechaActual</MudTd>
                            <MudTd DataLabel="Hora Local">@context.horaLocal</MudTd>
                            <MudTd DataLabel="UTC">@context.horaUtc <span> - Desfase: @context.desfase</span><br /><span>@context.tipoHorario</span></MudTd>
                            <MudTd DataLabel="Ubicación">@context.Location</MudTd>
                            <MudTd DataLabel="Coordenadas:"><span>Latitud: @context.Latitude</span> <br /><span>Longitud: @context.Longitude</span></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudContainer>

                             <MudGrid GutterSize="3">
                                @foreach (var entry in entries)
                                {
                                    <MudItem xs="12">
                                        <MudPaper Class="p-4 entry-card" Elevation="1" Style="background-color: #D7CCC8;">
                                            <MudText Typo="Typo.h6" Color="Color.Secondary">   @entry.fechaActual — @entry.horaLocal (@entry.tipoHorario)</MudText>
                                            <MudDivider Class="my-2" />
                                            <MudText><strong>UTC:</strong> @entry.horaUtc</MudText>
                                            <MudText><strong>Desfase:</strong> @entry.desfase</MudText>
                                            <MudText><strong>Ubicación:</strong> @entry.Location</MudText>
                                            <MudText><strong>Coordenadas:</strong><span>Lat.:</span> @entry.Latitude, <span>Long.:</span> @entry.Longitude</MudText>
                                        </MudPaper>
                                    </MudItem>
                                }
                            </MudGrid> 


    }

</MudContainer>

@code {
    [Inject] private LocationDatabaseService LocationDatabaseService { get; set; }
    [Inject] private IOneDriveService OneDriveService { get; set; }


    private string DbPath => Path.Combine(FileSystem.AppDataDirectory, "Ubicaciones.db");
    private List<LocationEntry> entries = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            entries = await LocationDatabaseService.GetAllEntriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[HistoryPage] Error cargando BD: {ex.Message}");
            await AlertService.ShowToastAsync("Error al cargar histórico");
            entries = new();
        }
    }



    private async Task BackupToOneDrive()
    {
        try
        {
            if (!OneDriveService.IsSignedIn)
                //  await OneDriveService.LoginAsync();

            await OneDriveService.UploadBackupAsync(DbPath);
            await AlertService.ShowToastAsync("✅ Backup subido a OneDrive");
        }
        catch (Exception ex)
        {
            //Console.WriteLine($"Error durante el backup: {ex.Message}");
            await AlertService.ShowLongToastAsync($"No se ha podido completar el backup: {ex.Message}");
        }
    }

    private async Task RestoreFromOneDrive()
    {
        try
        {
            //Console.WriteLine("RestoreFromOneDrive iniciado");

            if (!OneDriveService.IsSignedIn)
                //Console.WriteLine("No estás autenticado");
                // await OneDriveService.LoginAsync();

            await OneDriveService.DownloadBackupAsync(DbPath);
            await LocationDatabaseService.ReopenAsync();
            await LoadUbicacionesAsync(); // recarga los datos
            //Console.WriteLine("Restauración completada");

            await AlertService.ShowToastAsync("📂 Backup restaurado desde OneDrive");
        }
        catch (Exception ex)
        {
            //Console.WriteLine($"Error durante la restauración: {ex.Message}");
            await AlertService.ShowLongToastAsync($"No se pudo restaurar el backup: {ex.Message}");
        }
        
    }


    private async Task LoadUbicacionesAsync()
    {
        entries = await LocationDatabaseService.GetAllEntriesAsync();
        StateHasChanged(); // fuerza el refresco de la vista
    }

} *@