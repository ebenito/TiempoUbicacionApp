@page "/"
@using TiempoUbicacionApp.Models
@using TiempoUbicacionApp.Services
@using CommunityToolkit.Maui.Alerts
@inject IJSRuntime JS
@inject IAlertService AlertService
@* @inject TimeZoneService TimeZoneService *@
@inject GeolocationService GeolocationService
@inject LocationDatabaseService DatabaseService



<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudText Typo="Typo.h6" Color="Color.Primary">Datos de fecha y hora</MudText>
            <MudText>📅 Fecha: @fechaActual</MudText>
            <MudText>🕒 Hora Local: @horaLocal</MudText>
            <MudText>🌍 Hora UTC: @horaUtc (Desfase: @offsetFormatted)</MudText>
            <MudText>⏱ Horario: @tipoHorario</MudText>
        </MudCardContent>
    </MudCard>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Elevation="1" Dense="true">
            ⚠️ @errorMessage
        </MudAlert>
    }
    else if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }
    else
    {
        <MudCard Class="mb-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="Color.Primary">📍 Ubicación actual</MudText>
                <MudText>@locationName</MudText>
                <MudText>Latitud: @formattedLatitude</MudText>
                <MudText>Longitud: @formattedLongitude</MudText>
                <MudText>Zona horaria fija: @zona</MudText>

                @if (!string.IsNullOrWhiteSpace(mapUrl))
                {
                    <MudPaper Class="mt-3" Style="overflow:hidden; border-radius:12px;">
                        <iframe width="100%" height="250" frameborder="0" src="@mapUrl" allowfullscreen></iframe>
                    </MudPaper>
                }
            </MudCardContent>
        </MudCard>
    }

    <MudGrid Class="mt-4" GutterSize="3">
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth OnClick="SaveData">Guardar</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth OnClick="ShareData">Compartir</MudButton>
        </MudItem>
    </MudGrid>

</MudContainer>


@code {
    string locationName = string.Empty, formattedLatitude = string.Empty, formattedLongitude = string.Empty, mapUrl = string.Empty;

    string errorMessage = string.Empty;
    bool isLoading = true;

    private string horaLocal = string.Empty;
    private string horaUtc = string.Empty;
    private string fechaActual = string.Empty;
    private string offsetFormatted = string.Empty;
    private string tipoHorario = string.Empty;
    private int zona = 0;


    private System.Threading.Timer timer;  
    //private TimeZoneService _timeZoneService;  

    protected override void OnInitialized()  
    {  
        // _timeZoneService = TimeZoneService; 
        timer = new System.Threading.Timer(async _ => await ActualizarDatosAsync(), null, 0, 1000);  
    }  

    public void Dispose()
    {
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        timer?.Dispose();
    }

    private async Task ActualizarDatosAsync()
    {
        var now = DateTime.Now;
        var utcNow = DateTime.UtcNow;
        var offset = TimeZoneInfo.Local.GetUtcOffset(now);

        horaLocal = now.ToString("HH:mm:ss");
        horaUtc = utcNow.ToString("HH:mm:ss");
        fechaActual = now.ToString("dddd, dd MMMM yyyy");
        offsetFormatted = offset >= TimeSpan.Zero ? $"+{offset:hh\\:mm}" : $"-{offset:hh\\:mm}";
        tipoHorario = TimeZoneInfo.Local.IsDaylightSavingTime(now) ? "Horario de ahorro de luz (verano)" : "Horario estándar (invierno)";

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {   
            await CheckPermisosUbicacion();
            var location = await GeolocationService.GetCurrentLocationAsync();

            if (location.Name != null)
            {
                locationName = location.Name;
                formattedLatitude = location.FormattedLatitude;
                formattedLongitude = location.FormattedLongitude;
                zona = 1; //_timeZoneService.GetStandardGMTZone();
                mapUrl = $"https://maps.google.com/maps?q={location.Lat},{location.Lng}&z=15&output=embed";
            }
            else            
            {
                locationName = "Casto Celtíbero, Olmeda de Cobeta";
                formattedLatitude = "40.51.33 N";
                formattedLongitude = "02.12.32 O";
                zona = 1;
                mapUrl = $"https://maps.google.com/maps?q=40.859177,-2.208990&z=15&output=embed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error: " + ex.Message;
            await AlertService.ShowToastAsync(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckPermisosUbicacion()
    {
        // Este método debe ser implementado en el servicio de plataforma
        // Aquí solo se llama al servicio de alerta si hay error
        await Task.CompletedTask;
    }


    async Task SaveData()  
    {  
        await DatabaseService.SaveEntryAsync(new LocationEntry  
        {  
            Date = DateTime.Now,  
            horaLocal = horaLocal,
            horaUtc = horaUtc,
            fechaActual = fechaActual,
            desfase = offsetFormatted,
            tipoHorario = tipoHorario,
            Location = locationName,  
            Latitude = formattedLatitude,  
            Longitude = formattedLongitude  
        });  
            
        await AlertService.ShowToastAsync("Datos guardados correctamente"); 
    }  

    async Task ShareData()
    { 
        string text = $"📅 Fecha: {fechaActual}\n🕒 Hora local: {horaLocal}\n🌍 Hora UTC: {horaUtc} (Desfase: {offsetFormatted})\n🕓 Periodo: {tipoHorario}\n📍 Ubicación: {locationName}\n🧭 Lat: {formattedLatitude}, Lon: {formattedLongitude}";

        try
        {
            var canShare = await JS.InvokeAsync<bool>("canShare");

            if (!canShare)
            {
                await AlertService.ShowToastAsync("navigator.share no está disponible.");
                return;
            }

            await JS.InvokeVoidAsync("invokeShare", new
            {
                title = "Mis datos de ubicación y tiempo",
                text
            });
        }
        catch (JSException jsEx)
        {
            await JS.InvokeVoidAsync("copyToClipboard", text);
            await AlertService.ShowToastAsync("Se han copiado los datos al portapapeles; ahora puede pegarlos en dónde los necesite.");
        }
    }
}