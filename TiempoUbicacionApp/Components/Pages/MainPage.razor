@page "/"
@using TiempoUbicacionApp.Models
@using TiempoUbicacionApp.Services
@using CommunityToolkit.Maui.Alerts
@inject IJSRuntime JS
@inject IAlertService AlertService
@inject GeolocationService GeolocationService
@inject LocationDatabaseService DatabaseService


<style>
    .card {
        background-color: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin: 15px 0;
    }

    .title {
        font-size: 1.4em;
        font-weight: bold;
        margin-bottom: 10px;
        color: #2c3e50;
    }

    .value {
        font-size: 1.2em;
        color: #34495e;
    }
</style>

<div class="card">
    <div class="title">Fecha y hora</div>
    <div class="value">📅 Fecha: @fechaActual</div>
    <div class="value">🕒 Hora Local: @horaLocal</div>
    <div class="value">🌍 Hora UTC: @horaUtc  (Desfase: @offsetFormatted)</div>
    <div class="value">⏱ Horario: @tipoHorario</div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="background-color:#fdecea; padding:10px; color:#c0392b; border-radius:8px;">
            ⚠️ @errorMessage
        </div>
    }
    else if (isLoading)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="card">
            <div class="title">Ubicación actual:</div>
            <div class="value">@locationName</div>
            <div class="value">Latitud: @formattedLatitude</div>
            <div class="value">Longitud: @formattedLongitude</div>

            @if (!string.IsNullOrWhiteSpace(mapUrl))
            {
                <div style="margin-top:10px">
                    <iframe width="100" height="250" frameborder="0" style="border-radius:12px"
                            src="@mapUrl" allowfullscreen></iframe>
                </div>
            }
        </div>
    }

<hr />
<div class="mt-4 flex flex-col gap-2">
    <button class="btn" @onclick="SaveData">Guardar</button>
    <button class="btn" @onclick="ShareData">Compartir</button>
</div>

@code {
    string locationName = string.Empty, formattedLatitude = string.Empty, formattedLongitude = string.Empty, mapUrl = string.Empty;

    string errorMessage = string.Empty;
    bool isLoading = true;

    private string horaLocal = string.Empty;
    private string horaUtc = string.Empty;
    private string fechaActual = string.Empty;
    private string offsetFormatted = string.Empty;
    private string tipoHorario = string.Empty;

    private System.Threading.Timer timer; 

    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(async _ => await ActualizarDatosAsync(), null, 0, 1000);
    }

    public void Dispose()
    {
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        timer?.Dispose();
    }

    private async Task ActualizarDatosAsync()
    {
        var now = DateTime.Now;
        var utcNow = DateTime.UtcNow;
        var offset = TimeZoneInfo.Local.GetUtcOffset(now);

        horaLocal = now.ToString("HH:mm:ss");
        horaUtc = utcNow.ToString("HH:mm:ss");
        fechaActual = now.ToString("dddd, dd MMMM yyyy");
        offsetFormatted = offset >= TimeSpan.Zero ? $"+{offset:hh\\:mm}" : $"-{offset:hh\\:mm}";
        tipoHorario = TimeZoneInfo.Local.IsDaylightSavingTime(now) ? "Horario de verano" : "Horario estándar";

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {   
            await CheckPermisosUbicacion();
            var location = await GeolocationService.GetCurrentLocationAsync();

            if (location.Name != null)
            {
                locationName = location.Name;
                formattedLatitude = location.FormattedLatitude;
                formattedLongitude = location.FormattedLongitude;
                mapUrl = $"https://maps.google.com/maps?q={location.Lat},{location.Lng}&z=15&output=embed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error: " + ex.Message;
            await AlertService.ShowToastAsync(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckPermisosUbicacion()
    {
        // Este método debe ser implementado en el servicio de plataforma
        // Aquí solo se llama al servicio de alerta si hay error
        await Task.CompletedTask;
    }


    @code {  

        async Task SaveData()  
        {  
            await DatabaseService.SaveEntryAsync(new LocationEntry  
            {  
                Date = DateTime.Now,  
                horaLocal = horaLocal,
                horaUtc = horaUtc,
                fechaActual = fechaActual,
                desfase = offsetFormatted,
                tipoHorario = tipoHorario,
                Location = locationName,  
                Latitude = formattedLatitude,  
                Longitude = formattedLongitude  
            });  
            
            await AlertService.ShowToastAsync("Datos guardados correctamente"); 
        }  
    }

    async Task ShareData()
    { 
        string text = $"📅 Fecha: {fechaActual}\n🕒 Hora local: {horaLocal}\n🌍 Hora UTC: {horaUtc} (Desfase: {offsetFormatted})\n🕓 Periodo: {tipoHorario}\n📍 Ubicación: {locationName}\n🧭 Lat: {formattedLatitude}, Lon: {formattedLongitude}";

        try
        {
            var canShare = await JS.InvokeAsync<bool>("canShare");

            if (!canShare)
            {
                await AlertService.ShowToastAsync("navigator.share no está disponible.");
                return;
            }

            await JS.InvokeVoidAsync("invokeShare", new
            {
                title = "Mis datos de ubicación y tiempo",
                text
            });
        }
        catch (JSException jsEx)
        {
            await JS.InvokeVoidAsync("copyToClipboard", text);
            await AlertService.ShowToastAsync("Se han copiado los datos al portapapeles; ahora puede pegarlos en dónde los necesite.");
        }
    }
}