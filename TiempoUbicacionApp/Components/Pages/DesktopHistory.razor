@using MudBlazor
@using TiempoUbicacionApp.Helpers
@using TiempoUbicacionApp.Models
@using TiempoUbicacionApp.Services
@inject LocationDatabaseService DatabaseService
@inject IAlertService AlertService

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">📜 Histórico de registros</MudText>

    <MudStack Row="true" Spacing="2" Class="mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnBackup" Style="min-width: 165px;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Medium" />
                <span>Backup</span>
            </MudStack>
        </MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnRestore" Style="min-width: 165px;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Medium" />
                <span>Restaurar</span>
            </MudStack>
        </MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="OnRefresh" Style="min-width: 165px;">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" />
                <span>Refrescar</span>
            </MudStack>
        </MudButton>

    </MudStack>

    @if (_loading)
    {
        <MudText>Cargando…</MudText>
    }
    else if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Error">@_error</MudAlert>
    }
    else if (@Entries.Count() == 0)
    {
        <MudAlert Severity="Severity.Info">No hay registros guardados.</MudAlert>
    }
    else
    {
        <MudTable Items="@Entries" Dense="true" Hover="true" Bordered="true" Elevation="0" Striped="true">
            <HeaderContent>
                <MudTh>Fecha</MudTh>
                <MudTh>Hora Local</MudTh>
                <MudTh>UTC (Desfase)</MudTh>
                <MudTh>Horario</MudTh>
                <MudTh>Ubicación</MudTh>
                <MudTh>Lat / Lon</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Fecha">@context.fechaActual</MudTd>
                <MudTd DataLabel="Hora Local">@context.horaLocal</MudTd>
                <MudTd DataLabel="UTC">@context.horaUtc (@context.desfase)</MudTd>
                <MudTd DataLabel="Horario">@context.tipoHorario</MudTd>
                <MudTd DataLabel="Ubicación">@context.Location</MudTd>
                <MudTd DataLabel="Lat / Lon">
                    @{
                        var mapUrl = CoordinatesHelper.GetGoogleMapsUrl(context.Latitude, context.Longitude);
                        var hasCoordinates = !string.IsNullOrEmpty(context.Latitude) && !string.IsNullOrEmpty(context.Longitude);
                    }
                    @if (!string.IsNullOrEmpty(mapUrl))
                    {
                        <MudLink Href="@mapUrl" Target="_blank" Class="coord-link">@context.Latitude, @context.Longitude</MudLink>
                    }
                    else if (hasCoordinates)
                    {
                        <span>@context.Latitude, @context.Longitude</span>
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    [Parameter] public IEnumerable<LocationEntry> Entries { get; set; } = Enumerable.Empty<LocationEntry>();

    [Parameter] public EventCallback OnBackup { get; set; }
    [Parameter] public EventCallback OnRestore { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private bool _loading = true;
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await DatabaseService.OpenAsync();
        }
        catch (Exception ex)
        {
            _error = "No se pudo cargar el histórico en Windows.";
            try { await AlertService.ShowLongToastAsync($"{_error}\n{ex.Message}"); } catch { }
        }
        finally
        {
            _loading = false;
        }
    }

}
